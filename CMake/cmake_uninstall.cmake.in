message(STATUS "TUNGSTENUTILS_CLEAN_EMPTY_DIRS = @TUNGSTENUTILS_CLEAN_EMPTY_DIRS@")
if(@TUNGSTENUTILS_CLEAN_EMPTY_DIRS@)
    message(NOTICE "Uninstall will clean up empty parent directories")
else()
    message(NOTICE "Uninstall will NOT clean up empty parent directories")
endif()
message(STATUS "TUNGSTENUTILS_UNINSTALL_DRY_RUN = @TUNGSTENUTILS_UNINSTALL_DRY_RUN@")
if(@TUNGSTENUTILS_UNINSTALL_DRY_RUN@)
    message(NOTICE "Dry-run: nothing will be removed")
endif()

set(manifest_path "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt")
message(STATUS "Using install manifest: ${manifest_path}")
if(NOT EXISTS "${manifest_path}")
    message(FATAL_ERROR "Uninstall failed: '${manifest_path}' not found. Run install first.")
endif()

if(NOT DEFINED CMAKE_INSTALL_PREFIX)
    set(CMAKE_INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@")
endif()

set(would_remove_paths "")

file(READ "${manifest_path}" files_raw)
string(REGEX REPLACE "\r?\n" ";" files "${files_raw}")

set(full_paths "")
foreach(file IN LISTS files)
    string(STRIP "${file}" file)
    if(file STREQUAL "")
        continue()
    endif()

    # Resolve DESTDIR prefix (if set)
    if(DEFINED ENV{DESTDIR} AND NOT "$ENV{DESTDIR}" STREQUAL "")
        cmake_path(CONVERT "$ENV{DESTDIR}" TO_CMAKE_PATH_LIST DESTDIR_PATH NORMALIZE)
        string(REGEX REPLACE "/$" "" DESTDIR_PATH "${DESTDIR_PATH}")
        set(_resolved_path "${DESTDIR_PATH}${file}")
        # collapse accidental double slashes
        string(REGEX REPLACE "/+" "/" _resolved_path "${_resolved_path}")

        if(NOT IS_ABSOLUTE "${_resolved_path}")
            message(WARNING "Resolved uninstall path is not absolute: ${_resolved_path}")
        endif()
        list(APPEND full_paths "${_resolved_path}")
    else()
        list(APPEND full_paths "${file}")
    endif()
endforeach()

list(REMOVE_DUPLICATES full_paths)

set(success_count 0)
set(fail_count 0)

if(@TUNGSTENUTILS_CLEAN_EMPTY_DIRS@)
    function(path_is_prefix prefix path outvar)
        file(REAL_PATH "${prefix}" _p)
        file(REAL_PATH "${path}"   _q)

        if(_p STREQUAL "" OR _q STREQUAL "")
            set(${outvar} FALSE PARENT_SCOPE)
            return()
        endif()

        # Ensure cmake-style slashes
        file(TO_CMAKE_PATH "${_p}" _p)
        file(TO_CMAKE_PATH "${_q}" _q)

        if(WIN32)
            string(TOLOWER "${_p}" _p)
            string(TOLOWER "${_q}" _q)
        endif()

        # Strip trailing slash from prefix (except root)
        if(NOT _p STREQUAL "/")
            string(REGEX REPLACE "/+$" "" _p "${_p}")
        endif()

        string(LENGTH "${_p}" _plen)
        string(LENGTH "${_q}" _qlen)
        if(${_qlen} LESS ${_plen})
            set(${outvar} FALSE PARENT_SCOPE)
            return()
        endif()

        string(SUBSTRING "${_q}" 0 ${_plen} _head)
        if(NOT _head STREQUAL "${_p}")
            set(${outvar} FALSE PARENT_SCOPE)
            return()
        endif()

        # Boundary check: exact match or next char is '/'
        if(_qlen EQUAL _plen)
            set(${outvar} TRUE PARENT_SCOPE)
        else()
            string(SUBSTRING "${_q}" ${_plen} 1 _sep)
            if(_sep STREQUAL "/")
                set(${outvar} TRUE PARENT_SCOPE)
            else()
                set(${outvar} FALSE PARENT_SCOPE)
            endif()
        endif()
    endfunction()

    macro(remove_empty_parents dir limit)
        if("${dir}" STREQUAL "" OR "${limit}" STREQUAL "")
            message(FATAL_ERROR "remove_empty_parents: empty arg")
        endif()

        # Convert to fully normalized absolute paths
        file(REAL_PATH "${dir}" abs_dir)
        file(REAL_PATH "${limit}" abs_limit)

        if(WIN32)
            string(TOLOWER "${abs_limit}" abs_limit)
            string(TOLOWER "${abs_dir}" abs_dir)
        endif()

        # Safety check: ensure abs_dir starts with abs_limit
        path_is_prefix("${abs_limit}" "${abs_dir}" is_subdir)
        if(NOT is_subdir)
            message(WARNING "Refusing to remove: '${abs_dir}' is not under '${abs_limit}'")
            return()
        endif()

        set(current "${abs_dir}")
        while(NOT current STREQUAL "${abs_limit}")
            # Ensure we are still inside the prefix each step
            path_is_prefix("${abs_limit}" "${current}" still_in_prefix)
            if(NOT still_in_prefix)
                message(WARNING "Escaped prefix; stopping at '${current}'")
                break()
            endif()

            if(NOT IS_DIRECTORY "${current}" OR IS_SYMLINK "${current}")
                break()
            endif()

            file(GLOB children RELATIVE "${current}" LIST_DIRECTORIES true
                 "${current}/*" "${current}/.*")

            if(@TUNGSTENUTILS_UNINSTALL_DRY_RUN@)
                set(all_virtual_removed TRUE)
                foreach(child IN LISTS children)
                    file(REAL_PATH "${child}" abs_child BASE_DIRECTORY "${current}")
                    cmake_path(NORMAL_PATH abs_child OUTPUT_VARIABLE normalized_child)
                    list(FIND would_remove_paths "${normalized_child}" idx)
                    if(idx EQUAL -1)
                        set(all_virtual_removed FALSE)
                        break()
                    endif()
                endforeach()

                if(NOT all_virtual_removed)
                    break()
                endif()

                message(STATUS "Would remove empty directory: ${current}")
                file(REAL_PATH "${current}" abs_current)
                cmake_path(NORMAL_PATH abs_current OUTPUT_VARIABLE normalized_current)
                list(APPEND would_remove_paths "${normalized_current}")
            else()
                if(NOT children STREQUAL "")
                    break()
                endif()

                message(STATUS "Removing empty directory: ${current}")
                file(REMOVE_RECURSE "${current}")

                if(EXISTS "${current}" OR IS_DIRECTORY "${current}")
                    file(GLOB current_children RELATIVE "${current}" LIST_DIRECTORIES true
                         "${current}/*" "${current}/.*")
                    if(current_children STREQUAL "")
                        message(SEND_ERROR "Failed to remove empty directory: ${current}")
                    else()
                        message(WARNING "Directory repopulated while removing: ${current}")
                    endif()
                    break()
                endif()
            endif()

            get_filename_component(current "${current}" DIRECTORY)
        endwhile()
    endmacro()
endif()

if(@TUNGSTENUTILS_UNINSTALL_DRY_RUN@)
    foreach(full_path IN LISTS full_paths)
        if(IS_SYMLINK "${full_path}")
            message(STATUS "Would remove symlink: ${full_path}")
        elseif(EXISTS "${full_path}")
            message(STATUS "Would remove file: ${full_path}")
        else()
            message(STATUS "Already removed or missing: ${full_path}")
            continue()
        endif()

        math(EXPR success_count "${success_count} + 1")

        if(@TUNGSTENUTILS_CLEAN_EMPTY_DIRS@)
            file(REAL_PATH "${full_path}" abs_full)
            cmake_path(NORMAL_PATH abs_full OUTPUT_VARIABLE normalized_full)
            list(APPEND would_remove_paths "${normalized_full}")
            get_filename_component(dir "${abs_full}" DIRECTORY)
            remove_empty_parents("${dir}" "${CMAKE_INSTALL_PREFIX}")
        endif()
    endforeach()
else()
    foreach(full_path IN LISTS full_paths)
        if(IS_SYMLINK "${full_path}")
            message(STATUS "Removing symlink: ${full_path}")
        elseif(EXISTS "${full_path}")
            message(STATUS "Removing file: ${full_path}")
        else()
            message(STATUS "Already removed or missing: ${full_path}")
            continue()
        endif()

        # Resolve before removal to compute parent dir reliably
        file(REAL_PATH "${full_path}" abs_full)

        file(REMOVE "${full_path}")
        if(EXISTS "${full_path}" OR IS_SYMLINK "${full_path}")
            message(SEND_ERROR "Failed to remove: ${full_path}")
            math(EXPR fail_count "${fail_count} + 1")
        else()
            math(EXPR success_count "${success_count} + 1")
        endif()

        if(@TUNGSTENUTILS_CLEAN_EMPTY_DIRS@)
            get_filename_component(dir "${abs_full}" DIRECTORY)
            remove_empty_parents("${dir}" "${CMAKE_INSTALL_PREFIX}")
        endif()
    endforeach()
endif()

if(@TUNGSTENUTILS_UNINSTALL_DRY_RUN@)
    if(@TUNGSTENUTILS_CLEAN_EMPTY_DIRS@)
        list(REMOVE_DUPLICATES would_remove_paths)
        list(LENGTH would_remove_paths total_paths)
        message(NOTICE "Dry-run summary: ${total_paths} paths would be removed (including directories).")
    else()
        message(NOTICE "Dry-run summary: ${success_count} files would be removed (directories not cleaned).")
    endif()
endif()
message(STATUS "Uninstall process completed: ${success_count} removed, ${fail_count} failed.")